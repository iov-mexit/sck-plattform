name: 🚀 SCK Platform CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  YARN_VERSION: '4.0.2'
  NODE_ENV: 'production'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ✅ Enable Corepack FIRST (fixes the Yarn 1.x cache issue)
      - name: 🔧 Enable Corepack & Yarn 4.0.2
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate
          yarn --version

      - name: ⚙️ Setup Node.js & Yarn 4
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: ♻️ Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 📦 Install Dependencies
        run: yarn install --immutable

      - name: 🔧 Prisma Generate
        run: yarn workspace @sck/web dlx prisma generate

      - name: 🧪 Set Test Environment
        run: |
          echo "NEXT_PUBLIC_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_ENVIRONMENT=development" >> $GITHUB_ENV

      - name: 🔗 Link Vercel project (apps/web)
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          mkdir -p .vercel
          printf '{"projectId":"%s","orgId":"%s"}' "$VERCEL_PROJECT_ID" "$VERCEL_ORG_ID" > .vercel/project.json
          echo "📄 Wrote apps/web/.vercel/project.json"
          # Best-effort CLI link (not required once project.json exists)
          yarn dlx vercel link --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" || true
          test -f .vercel/project.json && echo "✅ Vercel project linked (project.json present)" || (echo "❌ Missing .vercel/project.json" && exit 1)

      - name: 🌐 Pull environment from Vercel (preview)
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          yarn dlx vercel env pull .env.ci --yes --environment=preview --token "$VERCEL_TOKEN"
          echo "✅ Pulled env from Vercel into apps/web/.env.ci"

      - name: "🌐 Fallback: Pull environment from Vercel (production) if DB missing"
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          if ! grep -qE '^(DATABASE_URL|POSTGRES_PRISMA_URL|POSTGRES_URL|SUPABASE_PRISMA_URL|SUPABASE_DATABASE_URL)=' .env.ci; then
            echo "ℹ️ DATABASE_URL not found in preview env; pulling production env as fallback"
            yarn dlx vercel env pull .env.prod --yes --environment=production --token "$VERCEL_TOKEN"
            # Merge prod into ci for missing keys
            while IFS= read -r line; do
              key="${line%%=*}"
              if ! grep -qE "^${key}=" .env.ci; then
                echo "$line" >> .env.ci
              fi
            done < .env.prod
            echo "✅ Merged production env into .env.ci for missing keys"
          fi

      - name: "🌐 Fallback: Fetch env via Vercel API if CLI lacks DB vars"
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if ! grep -qE '^(DATABASE_URL|POSTGRES_PRISMA_URL|POSTGRES_URL|SUPABASE_PRISMA_URL|SUPABASE_DATABASE_URL)=' .env.ci; then
            echo "ℹ️ Attempting Vercel API env fetch (preview)..."
            curl -fsSL -H "Authorization: Bearer $VERCEL_TOKEN" \
              "https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID/env?decrypt=true&environment=preview" \
              | jq -r '.envs[] | "\(.key)=\(.value)"' > .env.api || true
            if [ -s .env.api ]; then
              while IFS= read -r line; do
                key="${line%%=*}"
                if ! grep -qE "^${key}=" .env.ci; then
                  echo "$line" >> .env.ci
                fi
              done < .env.api
              echo "✅ Merged Vercel API preview env into .env.ci"
            fi
          fi
          if ! grep -qE '^(DATABASE_URL|POSTGRES_PRISMA_URL|POSTGRES_URL|SUPABASE_PRISMA_URL|SUPABASE_DATABASE_URL)=' .env.ci; then
            echo "ℹ️ Attempting Vercel API env fetch (production)..."
            curl -fsSL -H "Authorization: Bearer $VERCEL_TOKEN" \
              "https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID/env?decrypt=true&environment=production" \
              | jq -r '.envs[] | "\(.key)=\(.value)"' > .env.api.prod || true
            if [ -s .env.api.prod ]; then
              while IFS= read -r line; do
                key="${line%%=*}"
                if ! grep -qE "^${key}=" .env.ci; then
                  echo "$line" >> .env.ci
                fi
              done < .env.api.prod
              echo "✅ Merged Vercel API production env into .env.ci"
            fi
          fi

      - name: 🔐 Export DATABASE_URL from pulled env (with fallbacks)
        working-directory: apps/web
        run: |
          if [ -f .env.ci ]; then
            # Show available keys (masked values)
            echo "🔑 Pulled keys:" $(cut -d= -f1 .env.ci | tr '\n' ' ' | sed 's/.$//')

            # Try DATABASE_URL first
            DB=$(grep -E '^DATABASE_URL=' .env.ci | sed 's/^DATABASE_URL=//')
            # Fallbacks commonly set by Vercel Postgres/Supabase integrations
            [ -z "$DB" ] && DB=$(grep -E '^POSTGRES_PRISMA_URL=' .env.ci | sed 's/^POSTGRES_PRISMA_URL=//')
            [ -z "$DB" ] && DB=$(grep -E '^POSTGRES_URL=' .env.ci | sed 's/^POSTGRES_URL=//')
            [ -z "$DB" ] && DB=$(grep -E '^SUPABASE_PRISMA_URL=' .env.ci | sed 's/^SUPABASE_PRISMA_URL=//')
            [ -z "$DB" ] && DB=$(grep -E '^SUPABASE_DATABASE_URL=' .env.ci | sed 's/^SUPABASE_DATABASE_URL=//')

            if [ -z "$DB" ]; then
              echo "❌ DATABASE_URL missing in Vercel env (tried DATABASE_URL, POSTGRES_PRISMA_URL, POSTGRES_URL, SUPABASE_PRISMA_URL, SUPABASE_DATABASE_URL)" >&2
              exit 1
            fi
            if [[ "$DB" != *"sslmode="* ]]; then
              DB="${DB}?sslmode=require"
            fi
            echo "DATABASE_URL=$DB" >> $GITHUB_ENV
            echo "SHADOW_DATABASE_URL=$DB" >> $GITHUB_ENV
          else
            echo "❌ .env.ci not found after vercel env pull" >&2
            exit 1
          fi

      - name: 🗄️ Run Prisma Migrations (Supabase)
        run: yarn workspace @sck/web dlx prisma migrate deploy

      - name: 🚀 Start Next.js Dev Server
        env:
          NODE_ENV: development
        run: |
          nohup yarn workspace @sck/web dev > /dev/null 2>&1 &
          npx wait-on http://localhost:3000

      - name: 🔍 Type Check
        run: yarn workspace @sck/web type-check

      - name: 🧹 Lint Code
        run: yarn workspace @sck/web lint

      - name: 🧪 Run Tests
        run: CI=true yarn workspace @sck/web test

      - name: 🛑 Stop Dev Server
        if: always()
        run: |
          pkill -f "next dev" || true

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ✅ Enable Corepack FIRST (fixes the Yarn 1.x cache issue)
      - name: 🔧 Enable Corepack & Yarn 4.0.2
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate
          yarn --version

      - name: ⚙️ Setup Node.js & Yarn 4
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: ♻️ Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 📦 Install Dependencies
        run: yarn install --immutable

      - name: 🔧 Prisma Generate
        run: yarn workspace @sck/web prisma generate

      - name: 🔨 Build Next.js App
        run: yarn workspace @sck/web build

      - name: 📦 Deploy to Vercel
        run: yarn workspace @sck/web vercel --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ENV: production

      - name: 🏥 Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          curl -f https://sck-plattform.vercel.app/api/v1/health || echo "⚠️ Health check failed - deployment may still be in progress"
