name: 🚀 SCK Platform CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  YARN_VERSION: '4.0.2'
  NODE_ENV: 'production'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ✅ Enable Corepack FIRST (fixes the Yarn 1.x cache issue)
      - name: 🔧 Enable Corepack & Yarn 4.0.2
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate
          yarn --version

      - name: ⚙️ Setup Node.js & Yarn 4
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: ♻️ Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 📦 Install Dependencies
        run: yarn install --immutable

      - name: 🔧 Prisma Generate
        run: yarn workspace @sck/web dlx prisma generate

      - name: 🧪 Set Test Environment
        run: |
          echo "NEXT_PUBLIC_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_ENVIRONMENT=development" >> $GITHUB_ENV

      - name: 🔍 Type Check
        run: yarn workspace @sck/web type-check

      - name: 🧹 Lint Code
        run: yarn workspace @sck/web lint

      - name: 🧪 Run Tests
        run: CI=true yarn workspace @sck/web test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ✅ Enable Corepack FIRST (fixes the Yarn 1.x cache issue)
      - name: 🔧 Enable Corepack & Yarn 4.0.2
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate
          yarn --version

      - name: ⚙️ Setup Node.js & Yarn 4
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: ♻️ Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 📦 Install Dependencies
        run: yarn install --immutable

      - name: 🔧 Prisma Generate
        run: yarn workspace @sck/web prisma generate

      - name: 🔧 Rebuild Sharp for Linux
        run: |
          cd apps/web
          yarn add --force sharp
          yarn install --check-files

      - name: 🔨 Build Next.js App
        run: yarn workspace @sck/web build

      - name: 📦 Deploy to Vercel
        run: yarn workspace @sck/web vercel --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ENV: production

      - name: 🏥 Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          curl -f https://sck-plattform.vercel.app/api/v1/health || echo "⚠️ Health check failed - deployment may still be in progress"
