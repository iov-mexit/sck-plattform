name: 🚀 SCK Platform CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  YARN_VERSION: '4.0.2'
  NODE_ENV: 'production'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Enable Corepack & Yarn 4.0.2
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate
          yarn --version

      - name: ⚙️ Setup Node.js & Yarn 4
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: ♻️ Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 📦 Install Dependencies
        run: yarn install --immutable

      - name: 🔧 Prisma Generate
        run: yarn workspace @sck/web dlx prisma generate

      - name: 🧪 Set Test Environment
        run: |
          echo "NEXT_PUBLIC_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_ENVIRONMENT=development" >> $GITHUB_ENV

      - name: 🔗 Link Vercel project (apps/web)
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          mkdir -p .vercel
          printf '{"projectId":"%s","orgId":"%s"}' "$VERCEL_PROJECT_ID" "$VERCEL_ORG_ID" > .vercel/project.json
          echo "📄 Wrote apps/web/.vercel/project.json"
          yarn dlx vercel link --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" || true
          test -f .vercel/project.json && echo "✅ Vercel project linked" || (echo "❌ Missing .vercel/project.json" && exit 1)

      - name: 🌐 Pull environment from Vercel (preview)
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          yarn dlx vercel env pull .env.ci --yes --environment=preview --token "$VERCEL_TOKEN"
          echo "✅ Pulled env from Vercel into apps/web/.env.ci"

      - name: "🌐 Fallback: Pull production env if DB missing"
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          if ! grep -qE '^(DATABASE_URL|POSTGRES_PRISMA_URL|POSTGRES_URL|SUPABASE_PRISMA_URL|SUPABASE_DATABASE_URL)=' .env.ci; then
            echo "ℹ️ No DB vars in preview env; pulling prod env"
            yarn dlx vercel env pull .env.prod --yes --environment=production --token "$VERCEL_TOKEN"
            while IFS= read -r line; do
              key="${line%%=*}"
              # If key missing or present with empty value, write/overwrite from prod
              if ! grep -qE "^${key}=" .env.ci; then
                echo "$line" >> .env.ci
              else
                cur=$(grep -E "^${key}=" .env.ci | head -n1)
                curv=${cur#*=}
                if [ -z "$curv" ]; then
                  # overwrite empty value with prod value
                  sed -i.bak -E "s#^${key}=.*#${line//\//\\/}#" .env.ci && rm -f .env.ci.bak
                fi
              fi
            done < .env.prod
            echo "✅ Merged prod env into .env.ci"
          fi

      - name: 🔐 Normalize DATABASE_URL
        working-directory: apps/web
        run: |
          if [ ! -f .env.ci ]; then
            echo "❌ .env.ci missing" >&2
            exit 1
          fi

          echo "🔑 Pulled keys:" $(cut -d= -f1 .env.ci | tr '\n' ' ')

          set -a
          . ./.env.ci || true
          set +a

          # Try all possible DB URL sources
          DB="${DATABASE_URL:-${POSTGRES_PRISMA_URL:-${POSTGRES_URL:-${SUPABASE_PRISMA_URL:-${SUPABASE_DATABASE_URL:-}}}}}"
          DB=${DB%\"}; DB=${DB#\"}

          # Debug: show what we found
          if [ -n "$DB" ]; then
            echo "🔍 Found DB URL: $(echo "$DB" | sed -E 's#^(postgres(ql)?://)[^:]+:[^@]+@([^/?]+).*#\1***:***@\3#')"
          else
            echo "⚠️ No DB URL found in any source"
          fi

          if ! echo "$DB" | grep -Eq '^postgres(ql)?://'; then
            echo "⚠️ Invalid/missing DATABASE_URL, trying to reconstruct..."
            
            # Check if we have discrete vars
            if [ -n "$POSTGRES_HOST" ] && [ -n "$POSTGRES_USER" ] && [ -n "$POSTGRES_PASSWORD" ]; then
              USER="${POSTGRES_USER}"
              PASS="${POSTGRES_PASSWORD}"
              HOST="${POSTGRES_HOST}"
              PORT="${POSTGRES_PORT:-5432}"
              NAME="${POSTGRES_DATABASE:-postgres}"
              
              DB="postgresql://${USER}:${PASS}@${HOST}:${PORT}/${NAME}?sslmode=require"
              echo "✅ Reconstructed DATABASE_URL with host=${HOST}, port=${PORT}, db=${NAME}"
            else
              echo "❌ Cannot reconstruct DATABASE_URL - missing required vars:"
              echo "   POSTGRES_HOST: ${POSTGRES_HOST:-'missing'}"
              echo "   POSTGRES_USER: ${POSTGRES_USER:-'missing'}"
              echo "   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-'missing'}"
              echo "   POSTGRES_DATABASE: ${POSTGRES_DATABASE:-'missing'}"
              exit 1
            fi
          fi

          # Ensure a numeric port
          HOSTPART=$(echo "$DB" | sed -E 's#^postgres(ql)?://[^@]*@([^/:]+).*#\2#')
          PORTPART=$(echo "$DB" | sed -E 's#.*:([0-9]+)/.*#\1#;t;d')
          if [ -z "$PORTPART" ] || ! echo "$PORTPART" | grep -Eq '^[0-9]+$'; then
            DB=$(echo "$DB" | sed -E 's#(postgres(ql)?://[^@]*@[^/:]+)(:[^/]+)?#\1:5432#')
          fi

          echo "DB proto+host: $(echo "$DB" | sed -E 's#^(postgres(ql)?://)[^@]*@([^/?]+).*#\1\3#')"
          echo "DATABASE_URL=$DB" >> $GITHUB_ENV
          echo "SHADOW_DATABASE_URL=$DB" >> $GITHUB_ENV

      - name: 🗄️ Run Prisma Migrations
        run: yarn workspace @sck/web dlx prisma migrate deploy

      - name: 🚀 Start Next.js Dev Server
        env:
          NODE_ENV: development
        run: |
          nohup yarn workspace @sck/web dev > /dev/null 2>&1 &
          npx wait-on http://localhost:3000

      - name: 🔍 Type Check
        run: yarn workspace @sck/web type-check

      - name: 🧹 Lint Code
        run: yarn workspace @sck/web lint

      - name: 🧪 Run Tests
        run: CI=true yarn workspace @sck/web test

      - name: 🛑 Stop Dev Server
        if: always()
        run: pkill -f "next dev" || true

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Enable Corepack & Yarn 4.0.2
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate
          yarn --version

      - name: ⚙️ Setup Node.js & Yarn 4
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: ♻️ Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 📦 Install Dependencies
        run: yarn install --immutable

      - name: 🔧 Prisma Generate
        run: yarn workspace @sck/web prisma generate

      - name: 🔨 Build Next.js App
        run: yarn workspace @sck/web build

      - name: 📦 Deploy to Vercel
        run: yarn workspace @sck/web vercel --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ENV: production

      - name: 🏥 Health Check
        run: |
          echo "Waiting for deployment..."
          sleep 30
          curl -f https://sck-plattform.vercel.app/api/v1/health || echo "⚠️ Health check failed"