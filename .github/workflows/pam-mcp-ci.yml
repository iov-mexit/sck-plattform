name: PAM MCP CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/pam-mcp-gateway ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '20'

jobs:
  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript strict mode check
        run: npm run type-check

      - name: ESLint check
        run: npm run lint

  # Security Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run dependency audit
        run: npm audit --audit-level=high

  # Build and Deploy
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: cd apps/web && npx prisma generate --schema=./prisma/schema.prisma

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            apps/web/.next
            apps/web/dist

  # Quality Gate Summary
  quality-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, build]
    if: always()
    steps:
      - name: Quality Gate Summary
        run: |
          echo "## 🎯 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.quality-gates.result }}" == "success" ]; then
            echo "✅ **Quality Gates**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality Gates**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ **Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **Build**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Quality Gates Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
