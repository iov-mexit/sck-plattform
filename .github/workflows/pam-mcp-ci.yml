name: PAM MCP CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/pam-mcp-gateway ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '20'
  # Set default environment variables for CI
  DATABASE_URL: 'postgresql://dummy:dummy@localhost:5432/dummy'
  NEXT_PUBLIC_ENVIRONMENT: 'ci'
  NEXT_PUBLIC_API_VERSION: 'v1'
  CI: 'true'
  NODE_ENV: 'production'

jobs:
  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install turbo globally
        run: npm install -g turbo

      - name: Generate Prisma client first
        run: |
          cd apps/web
          echo "Generating Prisma client for quality gates..."
          npx prisma generate --schema=./prisma/schema.prisma

      - name: TypeScript strict mode check
        run: npm run type-check
        continue-on-error: true

      - name: ESLint check
        run: npm run lint
        continue-on-error: true

  # Security Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install turbo globally
        run: npm install -g turbo

      - name: Run dependency audit
        run: npm audit --audit-level=high
        continue-on-error: true

  # Build and Deploy
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install turbo globally
        run: npm install -g turbo

      - name: Generate Prisma client
        run: |
          cd apps/web
          echo "Generating Prisma client..."
          npx prisma generate --schema=./prisma/schema.prisma

      - name: Build application
        run: |
          echo "Building application..."
          npm run build

      - name: Verify build output
        run: |
          echo "Checking build output..."
          ls -la apps/web/
          if [ -d "apps/web/.next" ]; then
            echo "Build output found at apps/web/.next"
            ls -la apps/web/.next
          else
            echo "Build output not found, checking for alternative locations..."
            find . -name ".next" -type d 2>/dev/null || echo "No .next directories found"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: apps/web/.next

  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Quality Gate Summary
  quality-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, build, deploy]
    if: always()
    steps:
      - name: Quality Gate Summary
        run: |
          echo "## 🎯 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.quality-gates.result }}" == "success" ]; then
            echo "✅ **Quality Gates**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality Gates**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ **Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **Build**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ **Deploy to Vercel**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deploy to Vercel**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Quality Gates Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
