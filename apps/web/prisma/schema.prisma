generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum BlockchainTxStatus {
  pending
  confirmed
  failed
}

enum BlockchainTxType {
  NFT_MINT
  TRANSFER
  OTHER
}

enum RoleAgentStatus {
  active
  inactive
  suspended
  retired
}

enum ArtifactType {
  RoleAgent
  MCP
}

enum ApprovalFacet {
  security
  compliance
  policy
  risk
}

enum ApprovalDecision {
  approve
  reject
}

enum PolicyStatus {
  draft
  active
  archived
}

//
// MODELS
//
model audit_logs {
  id            String   @id @default(cuid())
  action        String
  entity        String
  entityId      String
  userId        String?
  organizationId String?
  roleAgentId   String?
  metadata      Json?
  createdAt     DateTime @default(now())

  organizations organizations? @relation(fields: [organizationId], references: [id])
  role_agents   role_agents?   @relation(fields: [roleAgentId], references: [id])

  @@index([action], map: "idx_audit_action")
  @@index([createdAt], map: "idx_audit_created")
  @@index([entity], map: "idx_audit_entity")
}

model blockchain_transactions {
  id              String            @id @default(cuid())
  transactionHash String            @unique
  network         String
  blockNumber     Int?
  gasUsed         String?
  gasPrice        String?
  status          BlockchainTxStatus @default(pending)
  roleAgentId     String?
  transactionType BlockchainTxType?
  tokenId         String?
  contractAddress String?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role_agents     role_agents?      @relation(fields: [roleAgentId], references: [id])

  @@index([transactionHash], map: "idx_blockchain_tx_hash")
  @@index([network], map: "idx_blockchain_tx_network")
  @@index([status], map: "idx_blockchain_tx_status")
  @@index([transactionType], map: "idx_blockchain_tx_type")
  @@index([tokenId], map: "idx_blockchain_tx_token")
}

model certifications {
  id            String      @id @default(cuid())
  name          String
  issuer        String
  issuedAt      DateTime
  expiresAt     DateTime?
  credentialUrl String?
  verified      Boolean     @default(false)
  verificationMethod String? // e.g. "manual", "onchain", "issuer_api"
  roleAgentId   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role_agents   role_agents @relation(fields: [roleAgentId], references: [id])

  @@index([roleAgentId], map: "idx_certifications_role_agent")
  @@index([expiresAt], map: "idx_certifications_expires")
  @@index([verified], map: "idx_certifications_verified")
}

model role_agents {
  id                      String                    @id @default(cuid())
  name                    String
  description             String?
  blockchainAddress       String?
  soulboundTokenId        String?
  blockchainNetwork       String?
  status                  RoleAgentStatus           @default(active)
  level                   Int                       @default(1)
  organizationId          String
  roleTemplateId          String
  assignedToDid           String?
  assignedToUserId        String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isEligibleForMint       Boolean                   @default(false)
  lastTrustCheck          DateTime?
  trustScore              Float?
  ansIdentifier           String?
  ansRegistrationStatus   String?                   @default("not_registered")
  ansRegistrationError    String?
  ansVerificationUrl      String?

  blockchain_transactions blockchain_transactions[]
  certifications          certifications[]
  trust_histories         trust_histories[]
  organizations           organizations             @relation(fields: [organizationId], references: [id])
  role_templates          role_templates            @relation(fields: [roleTemplateId], references: [id])
  signals                 signals[]
  audit_logs              audit_logs[]

  @@index([assignedToDid], map: "idx_role_agents_assigned_did")
  @@index([assignedToUserId], map: "idx_role_agents_assigned_user")
  @@index([blockchainAddress], map: "idx_role_agents_blockchain")
  @@index([isEligibleForMint], map: "idx_role_agents_eligible")
  @@index([organizationId], map: "idx_role_agents_org")
  @@index([roleTemplateId], map: "idx_role_agents_role")
  @@index([status], map: "idx_role_agents_status")
  @@index([trustScore], map: "idx_role_agents_trust")
  @@index([ansIdentifier], map: "idx_role_agents_ans")
  @@index([ansRegistrationStatus], map: "idx_role_agents_ans_status")
}

model trust_histories {
  id          String     @id @default(cuid())
  roleAgentId String
  trustScore  Float
  computedAt  DateTime   @default(now())
  metadata    Json?
  role_agents role_agents @relation(fields: [roleAgentId], references: [id])

  @@index([roleAgentId], map: "idx_trust_histories_role_agent")
  @@index([computedAt], map: "idx_trust_histories_time")
}

model organization_members {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  email          String
  role           String
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizations  organizations @relation(fields: [organizationId], references: [id])
}

model organizations {
  id                    String                  @id @default(cuid())
  name                  String
  description           String?
  domain                String                  @unique
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  isActive              Boolean                 @default(true)
  onboardingComplete    Boolean                 @default(false)
  complianceTags        Json?

  role_agents           role_agents[]
  organization_members  organization_members[]
  role_templates        role_templates[]
  role_trust_thresholds role_trust_thresholds[]
  loa_policies          loa_policies[]
  approvals             approvals[]
  mcp_policies          mcp_policies[]
  audit_logs            audit_logs[]

  @@index([isActive], map: "idx_organizations_active")
  @@index([domain], map: "idx_organizations_domain")
}

model role_templates {
  id                    String          @id @default(cuid())
  title                 String
  focus                 String
  category              String
  selectable            Boolean         @default(true)
  responsibilities      Json
  securityContributions Json
  organizationId        String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  role_agents           role_agents[]
  organizations         organizations?  @relation(fields: [organizationId], references: [id])
}

model role_trust_thresholds {
  id             String        @id @default(cuid())
  roleTitle      String
  minTrustScore  Float
  minLoALevel    Int?
  isActive       Boolean       @default(true)
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizations  organizations @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, roleTitle])
  @@index([organizationId], map: "idx_role_threshold_org")
}

model signals {
  id            String        @id @default(cuid())
  type          String
  title         String
  description   String?
  metadata      Json?
  value         Float?
  confidence    Float?
  source        String
  sourceType    String?
  verified      Boolean       @default(false)
  roleAgentId   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  url           String?
  role_agents   role_agents   @relation(fields: [roleAgentId], references: [id])

  @@index([roleAgentId], map: "idx_signals_role_agent")
  @@index([type], map: "idx_signals_type")
  @@index([verified], map: "idx_signals_verified")
}

model loa_policies {
  id              String      @id @default(cuid())
  organizationId  String
  artifactType    ArtifactType
  minReviewers    Int
  requiredFacets  ApprovalFacet[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  organizations   organizations @relation(fields: [organizationId], references: [id])

  @@index([organizationId], map: "idx_loa_policies_org")
}

model approvals {
  id             String    @id @default(cuid())
  organizationId String
  artifactId     String
  artifactType   ArtifactType
  reviewerId     String
  facet          ApprovalFacet
  decision       ApprovalDecision
  comment        String?
  createdAt      DateTime  @default(now())
  organizations  organizations @relation(fields: [organizationId], references: [id])

  @@index([organizationId], map: "idx_approvals_org")
  @@unique([artifactId, artifactType, reviewerId, facet])
}

model mcp_policies {
  id              String        @id @default(cuid())
  organizationId  String
  name            String
  version         Int           @default(1)
  status          PolicyStatus
  regoModule      String
  sha256          String
  isDefault       Boolean       @default(false)
  scope           Json
  createdBy       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organizations   organizations @relation(fields: [organizationId], references: [id])
  mcp_policy_tests mcp_policy_tests[]

  @@index([organizationId], map: "idx_mcp_policies_org")
  @@index([status], map: "idx_mcp_policies_status")
  @@unique([organizationId, name, version])
}

model mcp_policy_tests {
  id         String        @id @default(cuid())
  policyId   String
  name       String
  input      Json
  expected   Json
  createdAt  DateTime      @default(now())
  mcp_policies mcp_policies @relation(fields: [policyId], references: [id])

  @@index([policyId], map: "idx_mcp_policy_tests_policy")
}
