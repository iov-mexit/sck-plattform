generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id             String        @id @default(cuid())
  action         String
  entity         String
  entityId       String
  userId         String?
  organizationId String?
  roleAgentId    String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  roleAgent      RoleAgent?    @relation(fields: [roleAgentId], references: [id])

  @@index([action], map: "idx_audit_action")
  @@index([createdAt], map: "idx_audit_created")
  @@index([entity], map: "idx_audit_entity")
}

model BlockchainTransaction {
  id                String             @id @default(cuid())
  transactionHash   String             @unique
  network           String
  blockNumber       Int?
  gasUsed           String?
  gasPrice          String?
  status            BlockchainTxStatus @default(pending)
  roleAgentId       String?
  transactionType   BlockchainTxType?
  tokenId           String?
  contractAddress   String?
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  approvalRequestId String?
  approvalRequest   ApprovalRequest?   @relation(fields: [approvalRequestId], references: [id])
  roleAgent         RoleAgent?         @relation(fields: [roleAgentId], references: [id])

  @@index([transactionHash], map: "idx_blockchain_tx_hash")
  @@index([network], map: "idx_blockchain_tx_network")
  @@index([status], map: "idx_blockchain_tx_status")
  @@index([transactionType], map: "idx_blockchain_tx_type")
  @@index([tokenId], map: "idx_blockchain_tx_token")
}

model Certification {
  id                 String    @id @default(cuid())
  name               String
  issuer             String
  issuedAt           DateTime
  expiresAt          DateTime?
  credentialUrl      String?
  verified           Boolean   @default(false)
  verificationMethod String?
  roleAgentId        String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  roleAgent          RoleAgent @relation(fields: [roleAgentId], references: [id])

  @@index([roleAgentId], map: "idx_certifications_role_agent")
  @@index([expiresAt], map: "idx_certifications_expires")
  @@index([verified], map: "idx_certifications_verified")
}

model RoleAgent {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  blockchainAddress      String?
  soulboundTokenId       String?
  blockchainNetwork      String?
  status                 RoleAgentStatus         @default(active)
  level                  Int                     @default(1)
  loaLevel               LoALevel?
  approvalStatus         ApprovalDecision        @default(pending)
  organizationId         String
  roleTemplateId         String
  assignedToDid          String?
  assignedToUserId       String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  isEligibleForMint      Boolean                 @default(false)
  lastTrustCheck         DateTime?
  trustScore             Float?
  ansIdentifier          String?
  ansRegistrationStatus  String?                 @default("not_registered")
  ansRegistrationError   String?
  ansVerificationUrl     String?
  approvals              Approval[]
  auditLogs              AuditLog[]
  blockchainTransactions BlockchainTransaction[]
  certifications         Certification[]
  issuedTokens           GatewayToken[]
  signedBundles          PolicyBundle[]
  organization           Organization            @relation(fields: [organizationId], references: [id])
  roleTemplate           RoleTemplate            @relation(fields: [roleTemplateId], references: [id])
  signals                Signal[]
  trustHistories         TrustHistory[]

  @@index([assignedToDid], map: "idx_role_agents_assigned_did")
  @@index([assignedToUserId], map: "idx_role_agents_assigned_user")
  @@index([blockchainAddress], map: "idx_role_agents_blockchain")
  @@index([isEligibleForMint], map: "idx_role_agents_eligible")
  @@index([organizationId], map: "idx_role_agents_org")
  @@index([roleTemplateId], map: "idx_role_agents_role")
  @@index([status], map: "idx_role_agents_status")
  @@index([trustScore], map: "idx_role_agents_trust")
  @@index([ansIdentifier], map: "idx_role_agents_ans")
  @@index([ansRegistrationStatus], map: "idx_role_agents_ans_status")
  @@index([loaLevel], map: "idx_role_agents_loa_level")
  @@index([approvalStatus], map: "idx_role_agents_approval_status")
}

model TrustHistory {
  id          String    @id @default(cuid())
  roleAgentId String
  trustScore  Float
  computedAt  DateTime  @default(now())
  metadata    Json?
  roleAgent   RoleAgent @relation(fields: [roleAgentId], references: [id])

  @@index([roleAgentId], map: "idx_trust_histories_role_agent")
  @@index([computedAt], map: "idx_trust_histories_time")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  email          String
  role           String
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Organization {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  domain              String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isActive            Boolean              @default(true)
  onboardingComplete  Boolean              @default(false)
  complianceTags      Json?
  approvals           Approval[]
  approvalRequests    ApprovalRequest[]
  auditLogs           AuditLog[]
  enforcementCalls    EnforcementCall[]
  gatewayTokens       GatewayToken[]
  loaPolicies         LoaPolicy[]
  mcpPolicies         McpPolicy[]
  organizationMembers OrganizationMember[]
  policyBundles       PolicyBundle[]
  roleAgents          RoleAgent[]
  roleTemplates       RoleTemplate[]
  roleTrustThresholds RoleTrustThreshold[]
  policyComponents    PolicyComponent[]
  policyCompositions  PolicyComposition[]
  trustTokens         TrustToken[]

  @@index([isActive], map: "idx_organizations_active")
  @@index([domain], map: "idx_organizations_domain")
}

model RoleTemplate {
  id                    String        @id @default(cuid())
  title                 String
  focus                 String
  category              String
  selectable            Boolean       @default(true)
  responsibilities      Json
  securityContributions Json
  organizationId        String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  roleAgents            RoleAgent[]
  organization          Organization? @relation(fields: [organizationId], references: [id])
}

model RoleTrustThreshold {
  id             String       @id @default(cuid())
  roleTitle      String
  minTrustScore  Float
  minLoALevel    Int?
  isActive       Boolean      @default(true)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, roleTitle])
  @@index([organizationId], map: "idx_role_threshold_org")
}

model Signal {
  id          String    @id @default(cuid())
  type        String
  title       String
  description String?
  metadata    Json?
  value       Float?
  confidence  Float?
  source      String
  sourceType  String?
  verified    Boolean   @default(false)
  roleAgentId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  url         String?
  roleAgent   RoleAgent @relation(fields: [roleAgentId], references: [id])

  @@index([roleAgentId], map: "idx_signals_role_agent")
  @@index([type], map: "idx_signals_type")
  @@index([verified], map: "idx_signals_verified")
}

model LoaPolicy {
  id               String          @id @default(cuid())
  organizationId   String
  artifactType     ArtifactType
  level            LoALevel
  minReviewers     Int
  requiredFacets   ApprovalFacet[]
  externalRequired Boolean         @default(false)
  description      String?
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  organization     Organization    @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, artifactType, level])
  @@index([organizationId], map: "idx_loa_policies_org")
  @@index([level], map: "idx_loa_policies_level")
  @@index([artifactType], map: "idx_loa_policies_artifact_type")
}

model Approval {
  id             String           @id @default(cuid())
  organizationId String
  artifactId     String
  artifactType   ArtifactType
  loaLevel       LoALevel
  reviewerId     String
  facet          ApprovalFacet
  decision       ApprovalDecision
  comment        String?
  reviewedAt     DateTime?
  createdAt      DateTime         @default(now())
  mcpPolicy      McpPolicy?       @relation(fields: [mcpPolicyId], references: [id])
  mcpPolicyId    String?
  organization   Organization     @relation(fields: [organizationId], references: [id])
  roleAgent      RoleAgent?       @relation(fields: [roleAgentId], references: [id])
  roleAgentId    String?

  @@unique([artifactId, artifactType, reviewerId, facet])
  @@index([organizationId], map: "idx_approvals_org")
  @@index([loaLevel], map: "idx_approvals_loa_level")
  @@index([artifactType], map: "idx_approvals_artifact_type")
}

model McpPolicy {
  id             String           @id @default(cuid())
  organizationId String
  name           String
  version        Int              @default(1)
  status         PolicyStatus
  loaLevel       LoALevel?
  approvalStatus ApprovalDecision @default(pending)
  regoModule     String
  sha256         String
  isDefault      Boolean          @default(false)
  scope          Json
  createdBy      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  approvals      Approval[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
  mcpPolicyTests McpPolicyTest[]

  @@unique([organizationId, name, version])
  @@index([organizationId], map: "idx_mcp_policies_org")
  @@index([status], map: "idx_mcp_policies_status")
  @@index([loaLevel], map: "idx_mcp_policies_loa_level")
  @@index([approvalStatus], map: "idx_mcp_policies_approval_status")
}

model McpPolicyTest {
  id        String    @id @default(cuid())
  policyId  String
  name      String
  input     Json
  expected  Json
  createdAt DateTime  @default(now())
  mcpPolicy McpPolicy @relation(fields: [policyId], references: [id])

  @@index([policyId], map: "idx_mcp_policy_tests")
}

model knowledge_documents {
  id             String   @id @default(cuid())
  organizationId String?
  sourceType     String
  sourceRef      String?
  title          String
  jurisdiction   String?
  framework      String?
  version        String?
  language       String?
  chunkIndex     Int
  content        String
  embedding      Bytes?
  hash           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId])
  @@index([framework])
  @@index([jurisdiction])
  @@index([hash], map: "idx_knowledge_hash")
}

model ai_recommendations {
  id             String   @id @default(cuid())
  organizationId String?
  agentType      String
  inputRef       String
  outputJson     Json
  confidence     Float?
  rationale      String?
  citations      String[]
  createdAt      DateTime @default(now())
}

model trust_ledger {
  id          String   @id @default(cuid())
  prevHash    String?
  eventType   String
  payloadHash String
  payload     Json
  merkleRoot  String?
  anchoredTx  String?
  createdAt   DateTime @default(now())

  @@index([eventType])
  @@index([createdAt])
}

model policy_bundles {
  id             String   @id @default(cuid())
  organizationId String?
  name           String
  version        Int      @default(1)
  status         String
  regoModule     String
  sha256         String
  signatures     Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([status])
  @@index([organizationId])
}

model artifact_risk_profiles {
  id             String   @id @default(cuid())
  artifactType   String
  artifactId     String
  organizationId String?
  riskScore      Float
  rationale      String?
  lastReviewedAt DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([artifactType, artifactId])
  @@index([organizationId])
}

model ApprovalRequest {
  id                     String                  @id @default(cuid())
  organizationId         String?
  artifactId             String
  artifactType           String
  loaLevel               Int
  status                 ApprovalStatus          @default(PENDING)
  requestorId            String?
  requestorType          String?
  requestReason          String?
  priority               String?
  dueDate                DateTime?
  reviewers              Json
  reviewHistory          Json?
  metadata               Json?
  requiredFacets         ApprovalFacet[]
  approvalsSatisfied     Boolean                 @default(false)
  rejectionCount         Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  decisions              ApprovalDecision[]
  organization           Organization?           @relation(fields: [organizationId], references: [id])
  votes                  ApprovalVote[]
  blockchainTransactions BlockchainTransaction[]
  explainability         ExplainabilitySnapshot?

  @@index([organizationId])
  @@index([artifactType])
  @@index([status])
  @@index([loaLevel])
  @@index([dueDate])
  @@index([createdAt])
}

model ApprovalVote {
  id                String           @id @default(cuid())
  approvalRequestId String
  facet             ApprovalFacet
  reviewerId        String
  vote              ApprovalDecision
  comment           String?
  signature         Bytes?
  publicKeyRef      String?
  createdAt         DateTime         @default(now())
  approvalRequest   ApprovalRequest  @relation(fields: [approvalRequestId], references: [id])

  @@unique([approvalRequestId, facet, reviewerId])
  @@index([approvalRequestId])
  @@index([facet])
  @@index([reviewerId])
  @@index([createdAt])
}

model TrustLedgerEvent {
  id           String   @id @default(cuid())
  artifactType String
  artifactId   String
  action       String
  payload      Json
  contentHash  String
  prevHash     String?
  chainHash    String?
  batchId      String?
  createdAt    DateTime @default(now())

  @@index([artifactType, artifactId, createdAt])
  @@index([batchId])
}

model TrustLedgerBatch {
  id          String   @id @default(cuid())
  fromEventId String
  toEventId   String
  merkleRoot  String
  anchoredTx  String?
  createdAt   DateTime @default(now())

  @@index([merkleRoot])
  @@index([createdAt])
}

model KnowledgeDocument {
  id             String           @id @default(cuid())
  organizationId String?
  title          String
  sourceType     String
  sourceUrl      String?
  tags           String[]
  checksum       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  chunks         KnowledgeChunk[]

  @@index([organizationId])
  @@index([sourceType])
  @@index([checksum])
}

model KnowledgeChunk {
  id            String            @id @default(cuid())
  documentId    String
  ordinal       Int
  content       String
  tokens        Int?
  embeddingJson Json?
  createdAt     DateTime          @default(now())
  document      KnowledgeDocument @relation(fields: [documentId], references: [id])

  @@index([documentId], map: "idx_chunk_doc")
}

model ExplainabilitySnapshot {
  id                String          @id @default(cuid())
  approvalRequestId String          @unique
  rationale         String
  riskScore         Int
  riskVector        Json
  loaLevel          Int
  citations         Json
  policyMap         Json
  aiInvolved        Boolean         @default(false)
  aiMeta            Json?
  createdAt         DateTime        @default(now())
  approvalRequest   ApprovalRequest @relation(fields: [approvalRequestId], references: [id])
}

model PolicyBundle {
  id             String       @id @default(cuid())
  organizationId String
  version        String
  status         String
  bundleHash     String       @unique
  signature      String?
  signerId       String?
  storageUrl     String
  bundleSize     Int
  buildLogs      String?
  metadata       Json
  createdAt      DateTime     @default(now())
  publishedAt    DateTime?
  activatedAt    DateTime?
  revokedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])
  signer         RoleAgent?   @relation(fields: [signerId], references: [id])

  @@index([organizationId])
  @@index([status])
  @@index([version])
  @@index([bundleHash])
}

model GatewayToken {
  id               String            @id @default(cuid())
  organizationId   String
  tokenId          String            @unique
  artifactId       String
  artifactType     String
  loaLevel         Int
  scope            String[]
  bundleVersion    String?
  expiresAt        DateTime
  revokedAt        DateTime?
  issuedBy         String
  issuedFor        String?
  enforcementCalls EnforcementCall[]
  issuer           RoleAgent         @relation(fields: [issuedBy], references: [id])
  organization     Organization      @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([tokenId])
  @@index([artifactId])
  @@index([expiresAt])
  @@index([revokedAt])
}

model EnforcementCall {
  id             String        @id @default(cuid())
  organizationId String
  tokenId        String?
  upstreamId     String
  method         String
  path           String
  result         String
  decisionReason String?
  metadata       Json
  createdAt      DateTime      @default(now())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  token          GatewayToken? @relation(fields: [tokenId], references: [id])

  @@index([organizationId])
  @@index([tokenId])
  @@index([upstreamId])
  @@index([result])
  @@index([createdAt])
}

enum BlockchainTxStatus {
  pending
  confirmed
  failed
}

enum BlockchainTxType {
  NFT_MINT
  TRANSFER
  OTHER
  APPROVAL_DECISION
}

enum RoleAgentStatus {
  active
  inactive
  suspended
  retired
}

enum ArtifactType {
  RoleAgent
  MCP
  ANS
  Signal
  Delegation
}

enum ApprovalFacet {
  security
  compliance
  policy
  risk
  legal
  privacy
  architecture
}

enum ApprovalDecision {
  approve
  reject
  pending
  abstain
}

enum PolicyStatus {
  draft
  active
  archived
}

enum LoALevel {
  L1
  L2
  L3
  L4
  L5
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

// --- Phase 4: Advanced Policy Management ---
model PolicyComponent {
  id                String    @id @default(cuid())
  name              String
  description       String
  componentType     String
  complexity        String
  riskLevel         String
  complianceScore   Int
  organizationId    String
  createdBy         String
  isActive          Boolean   @default(true)
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  organization      Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([componentType])
  @@index([complexity])
  @@index([riskLevel])
}

model PolicyDependency {
  id                String    @id @default(cuid())
  sourceComponentId String
  targetComponentId String
  dependencyType    String
  strength          String
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([sourceComponentId])
  @@index([targetComponentId])
  @@index([dependencyType])
}

model PolicyComposition {
  id                String    @id @default(cuid())
  name              String
  description       String
  componentIds      String[]
  complexity        String
  riskLevel         String
  complianceScore   Int
  organizationId    String
  createdBy         String
  isActive          Boolean   @default(true)
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  organization      Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([complexity])
  @@index([riskLevel])
}

model PolicyPerformance {
  id                String    @id @default(cuid())
  policyId          String
  enforcementCount  Int
  averageResponseTime Int
  complianceRate   Float
  riskIncidents    Int
  costPerEnforcement Float
  userSatisfaction Float
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([policyId])
  @@index([createdAt])
}

// --- Phase 5: Trust Economy Integration ---
model TrustToken {
  id                String    @id @default(cuid())
  organizationId    String
  symbol            String
  name              String
  totalSupply       String
  circulatingSupply String
  network           String
  contractAddress   String?
  decimals          Int       @default(18)
  isActive          Boolean   @default(true)
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  organization      Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([symbol])
  @@index([network])
}

model TrustReward {
  id                String    @id @default(cuid())
  userId            String
  organizationId    String
  rewardType        String
  amount            String
  reason            String
  metadata          Json?
  isClaimed         Boolean   @default(false)
  claimedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([organizationId])
  @@index([rewardType])
  @@index([isClaimed])
}

model Micropayment {
  id                String    @id @default(cuid())
  fromUserId        String
  toUserId          String
  amount            String
  currency          String
  purpose           String
  transactionHash   String?
  status            String    @default("pending")
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
  @@index([status])
  @@index([createdAt])
}

model TrustMarketplace {
  id                String    @id @default(cuid())
  credentialId      String
  sellerId          String
  price             String
  currency          String
  description       String
  trustScore        Int
  verificationStatus String
  expiresInDays     Int
  isActive          Boolean   @default(true)
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([credentialId])
  @@index([sellerId])
  @@index([currency])
  @@index([isActive])
}
