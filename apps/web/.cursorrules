# SCK Frontend (Next.js) - Development Rules

## 🎯 FRONTEND ARCHITECTURE

### Next.js 15+ App Router
- Use **App Router** with TypeScript for all new pages
- Implement **Server Components** by default, Client Components when needed
- Use **Route Groups** for organization: `(auth)`, `(dashboard)`, `(api)`
- Implement **Parallel Routes** for complex layouts
- Use **Intercepting Routes** for modal dialogs

### Component Architecture
- **Atomic Design**: atoms → molecules → organisms → templates → pages
- **Compound Components** for complex UI patterns
- **Render Props** or **Custom Hooks** for reusable logic
- **Error Boundaries** at page and component levels
- **Suspense Boundaries** for loading states

### State Management
- **Server State**: Use React Query/SWR for API data
- **Client State**: Use Zustand for global state, React state for local
- **Form State**: Use React Hook Form with Zod validation
- **URL State**: Use Next.js router for navigation state

## 🎨 UI/UX STANDARDS

### Design System
- **Tailwind CSS** for utility-first styling
- **Radix UI** for accessible, unstyled components
- **Custom Design Tokens** for consistent theming
- **Dark Mode** support with CSS variables
- **Responsive Design** with mobile-first approach

### Accessibility (WCAG 2.1 AA)
- **Semantic HTML** with proper ARIA labels
- **Keyboard Navigation** for all interactive elements
- **Screen Reader** compatibility
- **Color Contrast** ratios (4.5:1 minimum)
- **Focus Management** for modals and dialogs

### Performance
- **Code Splitting** with dynamic imports
- **Image Optimization** with Next.js Image component
- **Font Loading** with `next/font`
- **Bundle Analysis** with `@next/bundle-analyzer`
- **Core Web Vitals** optimization
- **React Query** for client caching with default `staleTime` of 60 seconds
- **SSR caching** with `fetch` and `{ next: { revalidate: 60 } }`
- **CDN** for static assets and API responses

## 🔒 SECURITY IMPLEMENTATION

### Authentication Flow
- **DID-based authentication** with verifiable credentials
- **Wallet Connection** (MetaMask, WalletConnect)
- **Session Management** with secure cookies
- **CSRF Protection** for all forms
- **Rate Limiting** on client-side requests

### Data Protection
- **Client-side encryption** for sensitive user data
- **Input Validation** with Zod schemas
- **XSS Prevention** with proper escaping
- **Content Security Policy** headers
- **Secure Headers** with `next-secure-headers`

### Web3 Integration
- **Wallet Detection** and connection handling
- **Transaction Signing** with proper error handling
- **Gas Estimation** and optimization
- **Network Switching** support
- **Contract Interaction** with proper validation

## 🧪 TESTING STRATEGY

### Unit Testing
- **Jest** + **React Testing Library** for component tests
- **Mock Service Worker** for API mocking
- **Custom Render** with providers (theme, router, etc.)
- **Snapshot Testing** for UI regression detection
- **Accessibility Testing** with `@testing-library/jest-dom`

### Integration Testing
- **Playwright** for end-to-end testing
- **API Route Testing** with `supertest`
- **Database Testing** with test containers
- **Authentication Flow** testing
- **Web3 Integration** testing

### Visual Testing
- **Storybook** for component documentation
- **Chromatic** for visual regression testing
- **Design Token** validation
- **Responsive Design** testing
- **Cross-browser** compatibility

## 📁 FOLDER STRUCTURE

```
app/
├── (auth)/
│   ├── login/
│   └── register/
├── (dashboard)/
│   ├── overview/
│   ├── digital-twins/
│   └── settings/
├── api/
│   ├── auth/
│   ├── digital-twins/
│   └── webhooks/
├── globals.css
├── layout.tsx
└── page.tsx

components/
├── ui/           # Radix UI components
├── forms/        # Form components
├── layout/       # Layout components
├── digital-twin/ # Feature components
└── auth/         # Auth components

lib/
├── api/          # API client
├── auth/         # Auth utilities
├── blockchain/   # Web3 utilities
├── encryption/   # Encryption utilities
└── validation/   # Zod schemas

hooks/
├── use-auth.ts
├── use-wallet.ts
├── use-digital-twin.ts
└── use-api.ts
```

## 🚀 DEVELOPMENT WORKFLOW

### Code Quality
- **ESLint** with TypeScript rules
- **Prettier** for consistent formatting
- **Husky** for pre-commit hooks
- **TypeScript** strict mode enabled
- **Import Sorting** with `@trivago/prettier-plugin-sort-imports`

### Build Optimization
- **Tree Shaking** for unused code removal
- **Module Federation** for micro-frontend support
- **Bundle Analysis** for size optimization
- **Image Optimization** with WebP/AVIF
- **Font Optimization** with `next/font`

### Deployment
- **Vercel** for hosting and edge functions
- **Environment Variables** for configuration
- **Feature Flags** for gradual rollouts
- **Performance Monitoring** with Vercel Analytics
- **Error Tracking** with Sentry

### Observability & Monitoring
- **Sentry** for error tracking with source maps and Session Replay
- **Vercel Analytics** for Core Web Vitals and page views
- **Custom telemetry** for wallet connects, auth failures, Web3 transactions
- **Distributed tracing** with correlation IDs
- **Web3 transaction monitoring** (success rates, gas costs)
- **User journey tracking** for conversion optimization

## 🎯 IMMEDIATE PRIORITIES

1. **Wallet Connection**: Implement MetaMask/WalletConnect integration
2. **DID Authentication**: Build verifiable credential flow
3. **Digital Twin Dashboard**: Create main dashboard interface
4. **Smart Contract Integration**: Add contract reading/writing
5. **Responsive Design**: Ensure mobile compatibility
6. **Error Handling**: Implement comprehensive error boundaries
7. **Loading States**: Add skeleton loaders and spinners
8. **Testing**: Write unit and integration tests
9. **Error Pages**: Add 404.tsx and 500.tsx for clean UX
10. **SEO**: Add robots.txt and sitemap.xml
11. **i18n**: Set up next-intl for internationalization
12. **Feature Flags**: Implement @unleash/client for feature toggles
13. **Observability**: Set up Sentry and Vercel Analytics
14. **Accessibility**: Add eslint-plugin-jsx-a11y and ARIA labels

## 🔧 SPECIFIC GUIDELINES

### Component Development
```typescript
// ✅ Good: Proper TypeScript, error handling, accessibility
interface DigitalTwinCardProps {
  twin: DigitalTwin;
  onEdit?: (id: string) => void;
}

export function DigitalTwinCard({ twin, onEdit }: DigitalTwinCardProps) {
  const [isLoading, setIsLoading] = useState(false);
  
  const handleEdit = useCallback(async () => {
    try {
      setIsLoading(true);
      await onEdit?.(twin.id);
    } catch (error) {
      console.error('Failed to edit digital twin:', error);
    } finally {
      setIsLoading(false);
    }
  }, [twin.id, onEdit]);

  return (
    <Card className="p-4">
      <CardHeader>
        <CardTitle>{twin.name}</CardTitle>
        <CardDescription>{twin.description}</CardDescription>
      </CardHeader>
      <CardContent>
        {/* Content */}
      </CardContent>
      <CardFooter>
        <Button 
          onClick={handleEdit}
          disabled={isLoading}
          aria-label={`Edit ${twin.name}`}
        >
          {isLoading ? <Spinner /> : 'Edit'}
        </Button>
      </CardFooter>
    </Card>
  );
}
```

### API Route Development
```typescript
// ✅ Good: Input validation, error handling, proper typing
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

const CreateDigitalTwinSchema = z.object({
  name: z.string().min(1).max(100),
  description: z.string().optional(),
  metadata: z.record(z.unknown()).optional(),
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = CreateDigitalTwinSchema.parse(body);
    
    // Business logic here
    
    return NextResponse.json({ success: true, data: result });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid input data', details: error.errors },
        { status: 400 }
      );
    }
    
    console.error('Failed to create digital twin:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

Remember: **User experience is security.** A secure app that's unusable is not secure. 