// Role-Regulation Matrix: Maps role templates to regulatory requirements
// TDD Implementation: Core matrix structure and role-impact mapping

export type RegulatoryImpact = 'HIGH' | 'MEDIUM' | 'LOW';

export type RegulatoryFramework = 'GDPR' | 'EU_AI_ACT' | 'NIS2' | 'NIST_CSF' | 'OWASP';

export interface RegulatoryRequirement {
  id: string;
  title: string;
  description: string;
  impact: RegulatoryImpact;
  specificPolicies: string[];
  citation: string;
  lastUpdated: Date;
}

export interface RoleRegulatoryProfile {
  roleTemplateId: string;
  roleTitle: string;
  category: string;
  regulatoryImpact: Record<RegulatoryFramework, RegulatoryRequirement>;
  autoGeneratedPolicies: string[];
  complianceScore: number;
  lastAssessed: Date;
}

export class RoleRegulationMatrix {
  private matrix: Map<string, RoleRegulatoryProfile> = new Map();

  constructor() {
    this.initializeDefaultMatrix();
  }

  private initializeDefaultMatrix(): void {
    // L3 Security Engineer - High impact across all frameworks
    this.matrix.set('security-engineer-l3', {
      roleTemplateId: 'security-engineer-l3',
      roleTitle: 'L3 Security Engineer',
      category: 'Architecture',
      regulatoryImpact: {
        GDPR: {
          id: 'gdpr-sec-001',
          title: 'Data Protection & Security Controls',
          description: 'High-impact role requiring comprehensive data protection policies',
          impact: 'HIGH',
          specificPolicies: ['access_control', 'data_encryption', 'incident_response', 'audit_logging'],
          citation: 'GDPR Article 32 - Security of processing',
          lastUpdated: new Date()
        },
        EU_AI_ACT: {
          id: 'eu-ai-sec-001',
          title: 'AI System Security & Governance',
          description: 'Critical role in AI system security and compliance',
          impact: 'HIGH',
          specificPolicies: ['ai_governance', 'model_monitoring', 'security_testing', 'risk_assessment'],
          citation: 'EU AI Act Article 15 - High-risk AI systems requirements',
          lastUpdated: new Date()
        },
        NIS2: {
          id: 'nis2-sec-001',
          title: 'Cybersecurity & Incident Response',
          description: 'Primary responsibility for cybersecurity framework implementation',
          impact: 'HIGH',
          specificPolicies: ['incident_response', 'vulnerability_management', 'threat_intelligence', 'security_monitoring'],
          citation: 'NIS2 Directive Article 21 - Security measures',
          lastUpdated: new Date()
        },
        NIST_CSF: {
          id: 'nist-sec-001',
          title: 'Cybersecurity Framework Implementation',
          description: 'Core role in NIST CSF deployment and maintenance',
          impact: 'HIGH',
          specificPolicies: ['framework_implementation', 'continuous_monitoring', 'risk_assessment', 'security_controls'],
          citation: 'NIST CSF Core Functions',
          lastUpdated: new Date()
        },
        OWASP: {
          id: 'owasp-sec-001',
          title: 'Application Security & Vulnerability Management',
          description: 'Primary responsibility for OWASP Top 10 implementation',
          impact: 'HIGH',
          specificPolicies: ['secure_coding', 'vulnerability_scanning', 'penetration_testing', 'security_training'],
          citation: 'OWASP Top 10 2021',
          lastUpdated: new Date()
        }
      },
      autoGeneratedPolicies: [
        'data_protection_policy',
        'ai_security_governance',
        'incident_response_procedure',
        'vulnerability_management_policy',
        'security_monitoring_policy'
      ],
      complianceScore: 0.95,
      lastAssessed: new Date()
    });

    // L2 Frontend Developer - Medium impact, focused on user privacy
    this.matrix.set('frontend-developer-l2', {
      roleTemplateId: 'frontend-developer-l2',
      roleTitle: 'L2 Frontend Developer',
      category: 'Design',
      regulatoryImpact: {
        GDPR: {
          id: 'gdpr-frontend-001',
          title: 'User Privacy & Data Minimization',
          description: 'Medium-impact role focusing on user interface privacy controls',
          impact: 'MEDIUM',
          specificPolicies: ['cookie_consent', 'data_minimization', 'user_controls', 'privacy_by_design'],
          citation: 'GDPR Article 25 - Data protection by design and by default',
          lastUpdated: new Date()
        },
        EU_AI_ACT: {
          id: 'eu-ai-frontend-001',
          title: 'AI Transparency & User Control',
          description: 'Medium-impact role in AI system user interface',
          impact: 'MEDIUM',
          specificPolicies: ['ai_transparency', 'user_control', 'explainability_ui', 'consent_management'],
          citation: 'EU AI Act Article 13 - Transparency obligations',
          lastUpdated: new Date()
        },
        NIS2: {
          id: 'nis2-frontend-001',
          title: 'Basic Security & Input Validation',
          description: 'Low-impact role with basic security responsibilities',
          impact: 'LOW',
          specificPolicies: ['input_validation', 'secure_coding', 'basic_security', 'error_handling'],
          citation: 'NIS2 Directive Article 21 - Security measures',
          lastUpdated: new Date()
        },
        NIST_CSF: {
          id: 'nist-frontend-001',
          title: 'Basic Security Controls',
          description: 'Low-impact role in basic security implementation',
          impact: 'LOW',
          specificPolicies: ['basic_controls', 'secure_development', 'testing', 'documentation'],
          citation: 'NIST CSF Core Functions',
          lastUpdated: new Date()
        },
        OWASP: {
          id: 'owasp-frontend-001',
          title: 'Frontend Security & Vulnerability Prevention',
          description: 'Medium-impact role in preventing common web vulnerabilities',
          impact: 'MEDIUM',
          specificPolicies: ['xss_prevention', 'csrf_protection', 'secure_headers', 'input_sanitization'],
          citation: 'OWASP Top 10 2021',
          lastUpdated: new Date()
        }
      },
      autoGeneratedPolicies: [
        'user_privacy_policy',
        'ai_transparency_policy',
        'frontend_security_policy',
        'data_minimization_policy'
      ],
      complianceScore: 0.78,
      lastAssessed: new Date()
    });

    // L4 DevOps Architect - High impact on infrastructure security
    this.matrix.set('devops-architect-l4', {
      roleTemplateId: 'devops-architect-l4',
      roleTitle: 'L4 DevOps Architect',
      category: 'Architecture',
      regulatoryImpact: {
        GDPR: {
          id: 'gdpr-devops-001',
          title: 'Infrastructure Data Protection',
          description: 'High-impact role in infrastructure security and data protection',
          impact: 'HIGH',
          specificPolicies: ['infrastructure_security', 'data_encryption', 'access_control', 'monitoring'],
          citation: 'GDPR Article 32 - Security of processing',
          lastUpdated: new Date()
        },
        EU_AI_ACT: {
          id: 'eu-ai-devops-001',
          title: 'AI Infrastructure Security',
          description: 'High-impact role in AI system infrastructure security',
          impact: 'HIGH',
          specificPolicies: ['ai_infrastructure_security', 'model_deployment', 'monitoring', 'scalability'],
          citation: 'EU AI Act Article 15 - High-risk AI systems requirements',
          lastUpdated: new Date()
        },
        NIS2: {
          id: 'nis2-devops-001',
          title: 'Critical Infrastructure Security',
          description: 'High-impact role in critical infrastructure protection',
          impact: 'HIGH',
          specificPolicies: ['infrastructure_protection', 'incident_response', 'business_continuity', 'disaster_recovery'],
          citation: 'NIS2 Directive Article 21 - Security measures',
          lastUpdated: new Date()
        },
        NIST_CSF: {
          id: 'nist-devops-001',
          title: 'Infrastructure Security Framework',
          description: 'High-impact role in NIST CSF infrastructure implementation',
          impact: 'HIGH',
          specificPolicies: ['infrastructure_framework', 'continuous_monitoring', 'risk_management', 'security_controls'],
          citation: 'NIST CSF Core Functions',
          lastUpdated: new Date()
        },
        OWASP: {
          id: 'owasp-devops-001',
          title: 'DevOps Security & CI/CD Security',
          description: 'High-impact role in DevOps security practices',
          impact: 'HIGH',
          specificPolicies: ['devops_security', 'ci_cd_security', 'container_security', 'infrastructure_as_code'],
          citation: 'OWASP Top 10 2021',
          lastUpdated: new Date()
        }
      },
      autoGeneratedPolicies: [
        'infrastructure_security_policy',
        'ai_infrastructure_policy',
        'devops_security_policy',
        'business_continuity_policy'
      ],
      complianceScore: 0.92,
      lastAssessed: new Date()
    });
  }

  // Core methods for matrix operations
  getRoleProfile(roleTemplateId: string): RoleRegulatoryProfile | undefined {
    return this.matrix.get(roleTemplateId);
  }

  getAllRoleProfiles(): RoleRegulatoryProfile[] {
    return Array.from(this.matrix.values());
  }

  getRolesByRegulatoryImpact(framework: RegulatoryFramework, impact: RegulatoryImpact): RoleRegulatoryProfile[] {
    return this.getAllRoleProfiles().filter(profile =>
      profile.regulatoryImpact[framework].impact === impact
    );
  }

  getRolesByCategory(category: string): RoleRegulatoryProfile[] {
    return this.getAllRoleProfiles().filter(profile =>
      profile.category === category
    );
  }

  updateRoleProfile(roleTemplateId: string, updates: Partial<RoleRegulatoryProfile>): void {
    const existing = this.matrix.get(roleTemplateId);
    if (existing) {
      this.matrix.set(roleTemplateId, { ...existing, ...updates, lastAssessed: new Date() });
    }
  }

  addRoleProfile(profile: RoleRegulatoryProfile): void {
    this.matrix.set(profile.roleTemplateId, profile);
  }

  removeRoleProfile(roleTemplateId: string): boolean {
    return this.matrix.delete(roleTemplateId);
  }

  // Utility methods for policy generation
  getHighImpactPolicies(roleTemplateId: string): string[] {
    const profile = this.getRoleProfile(roleTemplateId);
    if (!profile) return [];

    const highImpactPolicies: string[] = [];
    Object.entries(profile.regulatoryImpact).forEach(([framework, requirement]) => {
      if (requirement.impact === 'HIGH') {
        highImpactPolicies.push(...requirement.specificPolicies);
      }
    });

    return [...new Set(highImpactPolicies)]; // Remove duplicates
  }

  getRegulatoryComplianceScore(roleTemplateId: string): number {
    const profile = this.getRoleProfile(roleTemplateId);
    if (!profile) return 0;

    let totalScore = 0;
    let frameworkCount = 0;

    Object.values(profile.regulatoryImpact).forEach(requirement => {
      const impactScore = requirement.impact === 'HIGH' ? 1.0 :
        requirement.impact === 'MEDIUM' ? 0.7 : 0.4;
      totalScore += impactScore;
      frameworkCount++;
    });

    return frameworkCount > 0 ? totalScore / frameworkCount : 0;
  }
}
