// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// CORE ENTITIES
// =============================================================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  domain      String   @unique // e.g., "acme.com"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  onboardingComplete Boolean @default(false) // Track onboarding completion

  // Relations
  roleTemplates RoleTemplate[]
  digitalTwins  DigitalTwin[]
  members       OrganizationMember[]
  roleTrustThresholds RoleTrustThreshold[]

  @@map("organizations")
  
  @@index([domain], name: "idx_organizations_domain")
  @@index([isActive], name: "idx_organizations_active")
}

model RoleTemplate {
  id          String   @id @default(cuid())
  title       String
  focus       String
  category    String   // "Product" | "Design" | "QA" | "Architecture" | "Solution Design"
  selectable  Boolean  @default(true) // curated vs. custom
  
  // JSON fields for structured data
  responsibilities     Json // Array of strings
  securityContributions Json // Array of SecurityContribution objects with title and bullets
  
  // Relations
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  digitalTwins   DigitalTwin[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("role_templates")
}

model RoleTrustThreshold {
  id          String   @id @default(cuid())
  roleTitle   String   // e.g., "Developer", "Analyst", "Architect"
  minTrustScore Float  // Minimum trust score required (0-100)
  isActive    Boolean  @default(true)
  
  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("role_trust_thresholds")
  
  @@unique([organizationId, roleTitle], name: "idx_role_threshold_org_role")
  @@index([organizationId], name: "idx_role_threshold_org")
}

model DigitalTwin {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Blockchain integration
  blockchainAddress String? // Wallet address
  soulboundTokenId  String? // NFT token ID
  blockchainNetwork String? // "ethereum", "sepolia", "flare"
  
  // Trust-based credentialing
  trustScore        Float?   // Trust score from SCW or other sources (0-100)
  assignedTo        String?  // Org-internal ID (email, HR ID, wallet)
  isEligibleForMint Boolean  @default(false) // Whether twin meets trust threshold
  lastTrustCheck    DateTime? // When trust score was last checked
  
  // Status tracking
  status      String   @default("active") // "active", "inactive", "suspended", "idle"
  level       Int      @default(1) // Digital twin level/experience
  
  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  roleTemplateId String
  roleTemplate   RoleTemplate @relation(fields: [roleTemplateId], references: [id])
  
  // DID assignment (privacy by design)
  assignedToDid String // DID only, no PII

  // Signals and certifications
  signals        Signal[]
  certifications Certification[]
  
  // Blockchain transactions
  blockchainTransactions BlockchainTransaction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("digital_twins")
  
  @@index([organizationId], name: "idx_digital_twins_org")
  @@index([roleTemplateId], name: "idx_digital_twins_role")
  @@index([assignedToDid], name: "idx_digital_twins_assigned")
  @@index([blockchainAddress], name: "idx_digital_twins_blockchain")
  @@index([status], name: "idx_digital_twins_status")
  @@index([trustScore], name: "idx_digital_twins_trust")
  @@index([isEligibleForMint], name: "idx_digital_twins_eligible")
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  // Member details
  name     String
  email    String
  role     String // "admin", "member", "viewer"
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organization_members")
}

// =============================================================================
// SIGNALS & CERTIFICATIONS
// =============================================================================

model Signal {
  id            String   @id @default(cuid())
  type          String   // "certification", "activity", "achievement"
  title         String
  description   String?
  metadata      Json?    // Flexible metadata
  value         Float?   // Numeric value if applicable
  source        String   // Source of the signal
  url           String?  // External reference URL
  verified      Boolean  @default(false)
  
  // Relations
  digitalTwinId String
  digitalTwin   DigitalTwin @relation(fields: [digitalTwinId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("signals")
  
  @@index([digitalTwinId], name: "idx_signals_digital_twin")
  @@index([type], name: "idx_signals_type")
  @@index([verified], name: "idx_signals_verified")
}

model Certification {
  id            String   @id @default(cuid())
  name          String
  issuer        String
  issuedAt      DateTime
  expiresAt     DateTime?
  credentialUrl String?
  verified      Boolean  @default(false)
  
  // Relations
  digitalTwinId String
  digitalTwin   DigitalTwin @relation(fields: [digitalTwinId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("certifications")
  
  @@index([digitalTwinId], name: "idx_certifications_digital_twin")
  @@index([verified], name: "idx_certifications_verified")
  @@index([expiresAt], name: "idx_certifications_expires")
}

// =============================================================================
// BLOCKCHAIN INTEGRATION
// =============================================================================

model BlockchainTransaction {
  id              String   @id @default(cuid())
  transactionHash String   @unique
  network         String   // "ethereum", "sepolia", "flare"
  blockNumber     Int?
  gasUsed         String?
  gasPrice        String?
  status          String   @default("pending") // "pending", "confirmed", "failed"
  
  // Relations
  digitalTwinId String?
  digitalTwin   DigitalTwin? @relation(fields: [digitalTwinId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blockchain_transactions")
  
  @@index([transactionHash], name: "idx_blockchain_tx_hash")
  @@index([network], name: "idx_blockchain_tx_network")
  @@index([status], name: "idx_blockchain_tx_status")
}

// =============================================================================
// AUDIT & SECURITY
// =============================================================================

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // "create", "update", "delete", "mint", "transfer"
  entity    String   // "digital_twin", "certification", "signal"
  entityId  String
  userId    String?
  metadata  Json?    // Additional context
  
  createdAt DateTime @default(now())

  @@map("audit_logs")
  
  @@index([action], name: "idx_audit_action")
  @@index([entity], name: "idx_audit_entity")
  @@index([createdAt], name: "idx_audit_created")
}
