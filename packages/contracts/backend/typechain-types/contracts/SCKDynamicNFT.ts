/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SCKDynamicNFT {
  export type AchievementStruct = {
    achievementType: string;
    title: string;
    description: string;
    metadata: string;
    trustScoreAtEarning: BigNumberish;
    earnedAt: BigNumberish;
    isSoulbound: boolean;
    imageURI: string;
  };

  export type AchievementStructOutput = [
    achievementType: string,
    title: string,
    description: string,
    metadata: string,
    trustScoreAtEarning: bigint,
    earnedAt: bigint,
    isSoulbound: boolean,
    imageURI: string
  ] & {
    achievementType: string;
    title: string;
    description: string;
    metadata: string;
    trustScoreAtEarning: bigint;
    earnedAt: bigint;
    isSoulbound: boolean;
    imageURI: string;
  };

  export type TrustSignalStruct = {
    signalType: BigNumberish;
    scoreImpact: BigNumberish;
    source: string;
    metadata: string;
    timestamp: BigNumberish;
    reporter: AddressLike;
    isVerified: boolean;
  };

  export type TrustSignalStructOutput = [
    signalType: bigint,
    scoreImpact: bigint,
    source: string,
    metadata: string,
    timestamp: bigint,
    reporter: string,
    isVerified: boolean
  ] & {
    signalType: bigint;
    scoreImpact: bigint;
    source: string;
    metadata: string;
    timestamp: bigint;
    reporter: string;
    isVerified: boolean;
  };

  export type RoleAgentStruct = {
    did: string;
    name: string;
    role: string;
    organization: string;
    trustScore: BigNumberish;
    trustLevel: BigNumberish;
    createdAt: BigNumberish;
    lastUpdated: BigNumberish;
    isActive: boolean;
    isEligibleForAchievements: boolean;
    totalSignals: BigNumberish;
    achievementCount: BigNumberish;
  };

  export type RoleAgentStructOutput = [
    did: string,
    name: string,
    role: string,
    organization: string,
    trustScore: bigint,
    trustLevel: bigint,
    createdAt: bigint,
    lastUpdated: bigint,
    isActive: boolean,
    isEligibleForAchievements: boolean,
    totalSignals: bigint,
    achievementCount: bigint
  ] & {
    did: string;
    name: string;
    role: string;
    organization: string;
    trustScore: bigint;
    trustLevel: bigint;
    createdAt: bigint;
    lastUpdated: bigint;
    isActive: boolean;
    isEligibleForAchievements: boolean;
    totalSignals: bigint;
    achievementCount: bigint;
  };
}

export interface SCKDynamicNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACHIEVEMENT_MINTER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_TRUST_SCORE"
      | "MIN_TRUST_SCORE"
      | "NFT_ELIGIBILITY_THRESHOLD"
      | "SIGNAL_UPDATER_ROLE"
      | "achievements"
      | "agentsByTrustLevel"
      | "approve"
      | "balanceOf"
      | "batchProcessTrustSignals"
      | "contractURI"
      | "deactivateRoleAgent"
      | "didToTokenId"
      | "getAchievements"
      | "getApproved"
      | "getPlatformStats"
      | "getRecentTrustSignals"
      | "getRoleAdmin"
      | "getRoleAgentData"
      | "getTokenIdByDID"
      | "getTrustSignals"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "isSoulbound"
      | "mintAchievement"
      | "mintRoleAgent"
      | "mintRoleAgentPublic"
      | "name"
      | "owner"
      | "ownerOf"
      | "processTrustSignal"
      | "reactivateRoleAgent"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "roleAgents"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setContractURI"
      | "soulboundTokens"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalAchievements"
      | "totalTrustSignals"
      | "transferFrom"
      | "transferOwnership"
      | "trustScoreHistory"
      | "trustSignals"
      | "userToTokenId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AchievementEarned"
      | "Approval"
      | "ApprovalForAll"
      | "EligibilityChanged"
      | "MetadataUpdated"
      | "OwnershipTransferred"
      | "RoleAdminChanged"
      | "RoleAgentMinted"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transfer"
      | "TrustScoreUpdated"
      | "TrustSignalProcessed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ACHIEVEMENT_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TRUST_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TRUST_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NFT_ELIGIBILITY_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNAL_UPDATER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "achievements",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agentsByTrustLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchProcessTrustSignals",
    values: [BigNumberish[], BigNumberish[], BigNumberish[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateRoleAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "didToTokenId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAchievements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentTrustSignals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAgentData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdByDID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustSignals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSoulbound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAchievement",
    values: [BigNumberish, string, string, string, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRoleAgent",
    values: [AddressLike, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRoleAgentPublic",
    values: [AddressLike, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processTrustSignal",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateRoleAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleAgents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "soulboundTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAchievements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTrustSignals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustScoreHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustSignals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userToTokenId",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACHIEVEMENT_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TRUST_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TRUST_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NFT_ELIGIBILITY_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNAL_UPDATER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "achievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentsByTrustLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchProcessTrustSignals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateRoleAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didToTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentTrustSignals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAgentData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdByDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustSignals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSoulbound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAchievement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintRoleAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintRoleAgentPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processTrustSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateRoleAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleAgents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "soulboundTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTrustSignals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustScoreHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustSignals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToTokenId",
    data: BytesLike
  ): Result;
}

export namespace AchievementEarnedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    achievementType: string,
    title: string,
    trustScoreAtEarning: BigNumberish,
    isSoulbound: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    achievementType: string,
    title: string,
    trustScoreAtEarning: bigint,
    isSoulbound: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    achievementType: string;
    title: string;
    trustScoreAtEarning: bigint;
    isSoulbound: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EligibilityChangedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    wasEligible: boolean,
    isEligible: boolean,
    trustScore: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    wasEligible: boolean,
    isEligible: boolean,
    trustScore: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    wasEligible: boolean;
    isEligible: boolean;
    trustScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, newMetadata: string];
  export type OutputTuple = [tokenId: bigint, newMetadata: string];
  export interface OutputObject {
    tokenId: bigint;
    newMetadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAgentMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    did: string,
    name: string,
    role: string,
    organization: string,
    owner: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    did: string,
    name: string,
    role: string,
    organization: string,
    owner: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    did: string;
    name: string;
    role: string;
    organization: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustScoreUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    oldScore: BigNumberish,
    newScore: BigNumberish,
    oldLevel: BigNumberish,
    newLevel: BigNumberish,
    signalType: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    oldScore: bigint,
    newScore: bigint,
    oldLevel: bigint,
    newLevel: bigint,
    signalType: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    oldScore: bigint;
    newScore: bigint;
    oldLevel: bigint;
    newLevel: bigint;
    signalType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustSignalProcessedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    signalType: BigNumberish,
    scoreImpact: BigNumberish,
    source: string,
    reporter: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    signalType: bigint,
    scoreImpact: bigint,
    source: string,
    reporter: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    signalType: bigint;
    scoreImpact: bigint;
    source: string;
    reporter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SCKDynamicNFT extends BaseContract {
  connect(runner?: ContractRunner | null): SCKDynamicNFT;
  waitForDeployment(): Promise<this>;

  interface: SCKDynamicNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACHIEVEMENT_MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_TRUST_SCORE: TypedContractMethod<[], [bigint], "view">;

  MIN_TRUST_SCORE: TypedContractMethod<[], [bigint], "view">;

  NFT_ELIGIBILITY_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  SIGNAL_UPDATER_ROLE: TypedContractMethod<[], [string], "view">;

  achievements: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, boolean, string] & {
        achievementType: string;
        title: string;
        description: string;
        metadata: string;
        trustScoreAtEarning: bigint;
        earnedAt: bigint;
        isSoulbound: boolean;
        imageURI: string;
      }
    ],
    "view"
  >;

  agentsByTrustLevel: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  batchProcessTrustSignals: TypedContractMethod<
    [
      tokenIds: BigNumberish[],
      signalTypes: BigNumberish[],
      scoreImpacts: BigNumberish[],
      sources: string[],
      metadataArray: string[]
    ],
    [void],
    "nonpayable"
  >;

  contractURI: TypedContractMethod<[], [string], "view">;

  deactivateRoleAgent: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  didToTokenId: TypedContractMethod<[arg0: string], [bigint], "view">;

  getAchievements: TypedContractMethod<
    [tokenId: BigNumberish],
    [SCKDynamicNFT.AchievementStructOutput[]],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getPlatformStats: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        totalAgents: bigint;
        totalSignalsProcessed: bigint;
        totalAchievementsEarned: bigint;
        eligibleAgents: bigint;
        unverifiedAgents: bigint;
        basicAgents: bigint;
        trustedAgents: bigint;
        highlyTrustedAgents: bigint;
        eliteAgents: bigint;
      }
    ],
    "view"
  >;

  getRecentTrustSignals: TypedContractMethod<
    [tokenId: BigNumberish, count: BigNumberish],
    [SCKDynamicNFT.TrustSignalStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleAgentData: TypedContractMethod<
    [tokenId: BigNumberish],
    [SCKDynamicNFT.RoleAgentStructOutput],
    "view"
  >;

  getTokenIdByDID: TypedContractMethod<[did: string], [bigint], "view">;

  getTrustSignals: TypedContractMethod<
    [tokenId: BigNumberish],
    [SCKDynamicNFT.TrustSignalStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isSoulbound: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  mintAchievement: TypedContractMethod<
    [
      tokenId: BigNumberish,
      achievementType: string,
      title: string,
      description: string,
      metadata: string,
      _isSoulbound: boolean,
      imageURI: string
    ],
    [void],
    "nonpayable"
  >;

  mintRoleAgent: TypedContractMethod<
    [
      to: AddressLike,
      did: string,
      name: string,
      role: string,
      organization: string,
      initialTrustScore: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mintRoleAgentPublic: TypedContractMethod<
    [
      to: AddressLike,
      did: string,
      name: string,
      role: string,
      organization: string,
      initialTrustScore: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  processTrustSignal: TypedContractMethod<
    [
      tokenId: BigNumberish,
      signalType: BigNumberish,
      scoreImpact: BigNumberish,
      source: string,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;

  reactivateRoleAgent: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  roleAgents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        did: string;
        name: string;
        role: string;
        organization: string;
        trustScore: bigint;
        trustLevel: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        isActive: boolean;
        isEligibleForAchievements: boolean;
        totalSignals: bigint;
        achievementCount: bigint;
      }
    ],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[baseURI: string], [void], "nonpayable">;

  setContractURI: TypedContractMethod<
    [contractMetadataURI: string],
    [void],
    "nonpayable"
  >;

  soulboundTokens: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalAchievements: TypedContractMethod<[], [bigint], "view">;

  totalTrustSignals: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustScoreHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  trustSignals: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, string, boolean] & {
        signalType: bigint;
        scoreImpact: bigint;
        source: string;
        metadata: string;
        timestamp: bigint;
        reporter: string;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  userToTokenId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACHIEVEMENT_MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_TRUST_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_TRUST_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NFT_ELIGIBILITY_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SIGNAL_UPDATER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "achievements"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, boolean, string] & {
        achievementType: string;
        title: string;
        description: string;
        metadata: string;
        trustScoreAtEarning: bigint;
        earnedAt: bigint;
        isSoulbound: boolean;
        imageURI: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "agentsByTrustLevel"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchProcessTrustSignals"
  ): TypedContractMethod<
    [
      tokenIds: BigNumberish[],
      signalTypes: BigNumberish[],
      scoreImpacts: BigNumberish[],
      sources: string[],
      metadataArray: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deactivateRoleAgent"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "didToTokenId"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAchievements"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [SCKDynamicNFT.AchievementStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPlatformStats"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        totalAgents: bigint;
        totalSignalsProcessed: bigint;
        totalAchievementsEarned: bigint;
        eligibleAgents: bigint;
        unverifiedAgents: bigint;
        basicAgents: bigint;
        trustedAgents: bigint;
        highlyTrustedAgents: bigint;
        eliteAgents: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecentTrustSignals"
  ): TypedContractMethod<
    [tokenId: BigNumberish, count: BigNumberish],
    [SCKDynamicNFT.TrustSignalStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAgentData"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [SCKDynamicNFT.RoleAgentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenIdByDID"
  ): TypedContractMethod<[did: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTrustSignals"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [SCKDynamicNFT.TrustSignalStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSoulbound"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintAchievement"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      achievementType: string,
      title: string,
      description: string,
      metadata: string,
      _isSoulbound: boolean,
      imageURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintRoleAgent"
  ): TypedContractMethod<
    [
      to: AddressLike,
      did: string,
      name: string,
      role: string,
      organization: string,
      initialTrustScore: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintRoleAgentPublic"
  ): TypedContractMethod<
    [
      to: AddressLike,
      did: string,
      name: string,
      role: string,
      organization: string,
      initialTrustScore: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "processTrustSignal"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      signalType: BigNumberish,
      scoreImpact: BigNumberish,
      source: string,
      metadata: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reactivateRoleAgent"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleAgents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        did: string;
        name: string;
        role: string;
        organization: string;
        trustScore: bigint;
        trustLevel: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        isActive: boolean;
        isEligibleForAchievements: boolean;
        totalSignals: bigint;
        achievementCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[baseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractURI"
  ): TypedContractMethod<[contractMetadataURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "soulboundTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalAchievements"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTrustSignals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustScoreHistory"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "trustSignals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, string, boolean] & {
        signalType: bigint;
        scoreImpact: bigint;
        source: string;
        metadata: string;
        timestamp: bigint;
        reporter: string;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userToTokenId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AchievementEarned"
  ): TypedContractEvent<
    AchievementEarnedEvent.InputTuple,
    AchievementEarnedEvent.OutputTuple,
    AchievementEarnedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "EligibilityChanged"
  ): TypedContractEvent<
    EligibilityChangedEvent.InputTuple,
    EligibilityChangedEvent.OutputTuple,
    EligibilityChangedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAgentMinted"
  ): TypedContractEvent<
    RoleAgentMintedEvent.InputTuple,
    RoleAgentMintedEvent.OutputTuple,
    RoleAgentMintedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TrustScoreUpdated"
  ): TypedContractEvent<
    TrustScoreUpdatedEvent.InputTuple,
    TrustScoreUpdatedEvent.OutputTuple,
    TrustScoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TrustSignalProcessed"
  ): TypedContractEvent<
    TrustSignalProcessedEvent.InputTuple,
    TrustSignalProcessedEvent.OutputTuple,
    TrustSignalProcessedEvent.OutputObject
  >;

  filters: {
    "AchievementEarned(uint256,string,string,uint256,bool)": TypedContractEvent<
      AchievementEarnedEvent.InputTuple,
      AchievementEarnedEvent.OutputTuple,
      AchievementEarnedEvent.OutputObject
    >;
    AchievementEarned: TypedContractEvent<
      AchievementEarnedEvent.InputTuple,
      AchievementEarnedEvent.OutputTuple,
      AchievementEarnedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "EligibilityChanged(uint256,bool,bool,uint256)": TypedContractEvent<
      EligibilityChangedEvent.InputTuple,
      EligibilityChangedEvent.OutputTuple,
      EligibilityChangedEvent.OutputObject
    >;
    EligibilityChanged: TypedContractEvent<
      EligibilityChangedEvent.InputTuple,
      EligibilityChangedEvent.OutputTuple,
      EligibilityChangedEvent.OutputObject
    >;

    "MetadataUpdated(uint256,string)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleAgentMinted(uint256,string,string,string,string,address)": TypedContractEvent<
      RoleAgentMintedEvent.InputTuple,
      RoleAgentMintedEvent.OutputTuple,
      RoleAgentMintedEvent.OutputObject
    >;
    RoleAgentMinted: TypedContractEvent<
      RoleAgentMintedEvent.InputTuple,
      RoleAgentMintedEvent.OutputTuple,
      RoleAgentMintedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TrustScoreUpdated(uint256,uint256,uint256,uint8,uint8,uint8)": TypedContractEvent<
      TrustScoreUpdatedEvent.InputTuple,
      TrustScoreUpdatedEvent.OutputTuple,
      TrustScoreUpdatedEvent.OutputObject
    >;
    TrustScoreUpdated: TypedContractEvent<
      TrustScoreUpdatedEvent.InputTuple,
      TrustScoreUpdatedEvent.OutputTuple,
      TrustScoreUpdatedEvent.OutputObject
    >;

    "TrustSignalProcessed(uint256,uint8,int256,string,address)": TypedContractEvent<
      TrustSignalProcessedEvent.InputTuple,
      TrustSignalProcessedEvent.OutputTuple,
      TrustSignalProcessedEvent.OutputObject
    >;
    TrustSignalProcessed: TypedContractEvent<
      TrustSignalProcessedEvent.InputTuple,
      TrustSignalProcessedEvent.OutputTuple,
      TrustSignalProcessedEvent.OutputObject
    >;
  };
}
